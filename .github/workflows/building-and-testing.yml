name: Building and testing

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  packages: write

jobs:
  msvc_debug_x86_64_windows:
    name: Build (MSVC Debug x86-64 Windows)
    env:
      CONFIGURE_PRESET_NAME: windows-x64
      BUILD_PRESET_NAME: windows-x64-debug
      BINARY_DIR: ${{ github.workspace }}\out\build\windows-x64\Debug
      VCPKG_BINARY_SOURCES: clear;nuget,GitHubPackages,readwrite
    runs-on: windows-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Check out vcpkg
        uses: actions/checkout@v4
        with:
          repository: microsoft/vcpkg
          path: ${{ github.workspace }}\vcpkg
          persist-credentials: false

      - name: Bootstrap vcpkg
        run: ${{ github.workspace }}\vcpkg\bootstrap-vcpkg.bat -disableMetrics

      - name: Add NuGet sources
        env:
          DOTNET_CLI_TELEMETRY_OPTOUT: 1
          FEED_URL: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
        run: >-
          dotnet nuget add source "${{ env.FEED_URL }}"
          --name GitHubPackages
          --username "${{ github.repository_owner }}"
          --password "${{ secrets.GITHUB_TOKEN }}"
          --store-password-in-clear-text

          dotnet nuget update source GitHubPackages
          --username "${{ github.repository_owner }}"
          --password "${{ secrets.GITHUB_TOKEN }}"
          --store-password-in-clear-text

      - name: Configure CMake
        run: >-
          cmake
          --preset '${{ env.CONFIGURE_PRESET_NAME }}'

      - name: Build
        run: >-
          cmake
          --build
          --parallel
          --preset ${{ env.BUILD_PRESET_NAME }}
          --
          -consoleLoggerParameters:ForceConsoleColor;ShowCommandLine
        shell: cmd

      - name: Run test driver
        run: >-
          .\test_driver.exe
          --reporter console::out=-::colour-mode=ansi
          --success
        working-directory: ${{ env.BINARY_DIR }}

      - name: Run static test driver
        run: >-
          .\static_test_driver.exe
          --reporter console::out=-::colour-mode=ansi
          --success
        working-directory: ${{ env.BINARY_DIR }}

      - name: Run test driver of experimental library
        env:
          MIMALLOC_SHOW_ERRORS: 1
          MIMALLOC_SHOW_STATS: 1
          MIMALLOC_VERBOSE: 1
        run: >-
          .\test_driver_experimental.exe
          --reporter console::out=-::colour-mode=ansi
          --success
        working-directory: ${{ env.BINARY_DIR }}

      - name: Run benchmarks
        run: >-
          .\benchmark_driver.exe
          --durations yes
          --reporter console::out=-::colour-mode=ansi
        working-directory: ${{ env.BINARY_DIR }}

      - name: Run benchmarks of experimental library
        run: >-
          .\benchmark_driver_experimental.exe
          --durations yes
          --reporter console::out=-::colour-mode=ansi
        working-directory: ${{ env.BINARY_DIR }}

  msvc_release_x86_64_windows:
    name: Build (MSVC Release x86-64 Windows)
    env:
      CONFIGURE_PRESET_NAME: windows-x64
      BUILD_PRESET_NAME: windows-x64-release
      BINARY_DIR: ${{ github.workspace }}\out\build\windows-x64\Release
      VCPKG_BINARY_SOURCES: clear;nuget,GitHubPackages,readwrite
    runs-on: windows-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Check out vcpkg
        uses: actions/checkout@v4
        with:
          repository: microsoft/vcpkg
          path: ${{ github.workspace }}\vcpkg
          persist-credentials: false

      - name: Bootstrap vcpkg
        run: ${{ github.workspace }}\vcpkg\bootstrap-vcpkg.bat -disableMetrics

      - name: Add NuGet sources
        env:
          DOTNET_CLI_TELEMETRY_OPTOUT: 1
          FEED_URL: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
        run: >-
          dotnet nuget add source "${{ env.FEED_URL }}"
          --name GitHubPackages
          --username "${{ github.repository_owner }}"
          --password "${{ secrets.GITHUB_TOKEN }}"
          --store-password-in-clear-text

          dotnet nuget update source GitHubPackages
          --username "${{ github.repository_owner }}"
          --password "${{ secrets.GITHUB_TOKEN }}"
          --store-password-in-clear-text

      - name: Configure CMake
        run: >-
          cmake
          --preset '${{ env.CONFIGURE_PRESET_NAME }}'

      - name: Build
        run: >-
          cmake
          --build
          --parallel
          --preset ${{ env.BUILD_PRESET_NAME }}
          --
          -consoleLoggerParameters:ForceConsoleColor;ShowCommandLine
        shell: cmd

      - name: Run test driver
        run: >-
          .\test_driver.exe
          --reporter console::out=-::colour-mode=ansi
          --success
        working-directory: ${{ env.BINARY_DIR }}

      - name: Run static test driver
        run: >-
          .\static_test_driver.exe
          --reporter console::out=-::colour-mode=ansi
          --success
        working-directory: ${{ env.BINARY_DIR }}

      - name: Run test driver of experimental library
        env:
          MIMALLOC_SHOW_ERRORS: 1
          MIMALLOC_SHOW_STATS: 1
          MIMALLOC_VERBOSE: 1
        run: >-
          .\test_driver_experimental.exe
          --reporter console::out=-::colour-mode=ansi
          --success
        working-directory: ${{ env.BINARY_DIR }}

      - name: Run benchmarks
        run: >-
          .\benchmark_driver.exe
          --durations yes
          --reporter console::out=-::colour-mode=ansi
        working-directory: ${{ env.BINARY_DIR }}

      - name: Run benchmarks of experimental library
        run: >-
          .\benchmark_driver_experimental.exe
          --durations yes
          --reporter console::out=-::colour-mode=ansi
        working-directory: ${{ env.BINARY_DIR }}

  gcc_debug_x86_64_linux:
    name: Build (GCC Debug x86-64 Linux)
    env:
      CC: /usr/bin/gcc-14
      CXX: /usr/bin/g++-14
      CONFIGURE_PRESET_NAME: strict-gcc
      BUILD_PRESET_NAME: strict-gcc-debug
      BINARY_DIR: ${{ github.workspace }}/out/build/strict-gcc/Debug
      VCPKG_BINARY_SOURCES: clear;nuget,GitHubPackages,readwrite
    runs-on: ubuntu-24.04

    steps:
      - name: Install tools
        run: >-
          sudo apt-get update

          sudo apt-get install
          mono-complete
          ninja-build
          valgrind

      - name: Check out repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Check out vcpkg
        uses: actions/checkout@v4
        with:
          repository: microsoft/vcpkg
          path: ${{ github.workspace }}/vcpkg
          persist-credentials: false

      - name: Bootstrap vcpkg
        run: ${{ github.workspace }}/vcpkg/bootstrap-vcpkg.sh -disableMetrics

      - name: Add NuGet sources
        env:
          FEED_URL: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
        run: >-
          mono `${{ github.workspace }}/vcpkg/vcpkg fetch nuget | tail -n 1`
          sources add
          -source "${{ env.FEED_URL }}"
          -storepasswordincleartext
          -name "GitHubPackages"
          -username "${{ github.repository_owner }}"
          -password "${{ secrets.GITHUB_TOKEN }}"

          mono `${{ github.workspace }}/vcpkg/vcpkg fetch nuget | tail -n 1`
          setapikey "${{ secrets.GITHUB_TOKEN }}"
          -source "${{ env.FEED_URL }}"

      - name: Configure CMake
        run: >-
          cmake
          --preset '${{ env.CONFIGURE_PRESET_NAME }}'

      - name: Build
        run: >-
          cmake
          --build
          --parallel
          --preset '${{ env.BUILD_PRESET_NAME }}'

      - name: Run and instrument test driver
        run: >-
          /usr/bin/valgrind
          --tool=memcheck
          --leak-check=full
          --show-leak-kinds=all
          ./test_driver
          --reporter console::out=-::colour-mode=ansi
          --success
        working-directory: ${{ env.BINARY_DIR }}

      - name: Run static test driver
        run: >-
          ./static_test_driver
          --reporter console::out=-::colour-mode=ansi
          --success
        working-directory: ${{ env.BINARY_DIR }}

      - name: Run and instrument test driver of experimental library
        env:
          MIMALLOC_SHOW_ERRORS: 1
          MIMALLOC_SHOW_STATS: 1
          MIMALLOC_VERBOSE: 1
        run: >-
          /usr/bin/valgrind
          --tool=memcheck
          --leak-check=full
          --show-leak-kinds=all
          ./test_driver_experimental
          --reporter console::out=-::colour-mode=ansi
          --success
        working-directory: ${{ env.BINARY_DIR }}

      - name: Run benchmarks
        run: >-
          ./benchmark_driver
          --durations yes
          --reporter console::out=-::colour-mode=ansi
        working-directory: ${{ env.BINARY_DIR }}

      - name: Run benchmarks of experimental library
        run: >-
          ./benchmark_driver_experimental
          --durations yes
          --reporter console::out=-::colour-mode=ansi
        working-directory: ${{ env.BINARY_DIR }}

  gcc_release_x86_64_linux:
    name: Build (GCC Release x86-64 Linux)
    env:
      CC: /usr/bin/gcc-14
      CXX: /usr/bin/g++-14
      CONFIGURE_PRESET_NAME: strict-gcc
      BUILD_PRESET_NAME: strict-gcc-release
      BINARY_DIR: ${{ github.workspace }}/out/build/strict-gcc/Release
      VCPKG_BINARY_SOURCES: clear;nuget,GitHubPackages,readwrite
    runs-on: ubuntu-24.04

    steps:
      - name: Install tools
        run: >-
          sudo apt-get update

          sudo apt-get install
          mono-complete
          ninja-build
          valgrind

      - name: Check out repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Check out vcpkg
        uses: actions/checkout@v4
        with:
          repository: microsoft/vcpkg
          path: ${{ github.workspace }}/vcpkg
          persist-credentials: false

      - name: Bootstrap vcpkg
        run: ${{ github.workspace }}/vcpkg/bootstrap-vcpkg.sh -disableMetrics

      - name: Add NuGet sources
        env:
          FEED_URL: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
        run: >-
          mono `${{ github.workspace }}/vcpkg/vcpkg fetch nuget | tail -n 1`
          sources add
          -source "${{ env.FEED_URL }}"
          -storepasswordincleartext
          -name "GitHubPackages"
          -username "${{ github.repository_owner }}"
          -password "${{ secrets.GITHUB_TOKEN }}"

          mono `${{ github.workspace }}/vcpkg/vcpkg fetch nuget | tail -n 1`
          setapikey "${{ secrets.GITHUB_TOKEN }}"
          -source "${{ env.FEED_URL }}"

      - name: Configure CMake
        run: >-
          cmake
          --preset '${{ env.CONFIGURE_PRESET_NAME }}'

      - name: Build
        run: >-
          cmake
          --build
          --parallel
          --preset '${{ env.BUILD_PRESET_NAME }}'

      - name: Run and instrument test driver
        run: >-
          /usr/bin/valgrind
          --tool=memcheck
          --leak-check=full
          --show-leak-kinds=all
          ./test_driver
          --reporter console::out=-::colour-mode=ansi
          --success
        working-directory: ${{ env.BINARY_DIR }}

      - name: Run static test driver
        run: >-
          ./static_test_driver
          --reporter console::out=-::colour-mode=ansi
          --success
        working-directory: ${{ env.BINARY_DIR }}

      - name: Run and instrument test driver of experimental library
        env:
          MIMALLOC_SHOW_ERRORS: 1
          MIMALLOC_SHOW_STATS: 1
          MIMALLOC_VERBOSE: 1
        run: >-
          /usr/bin/valgrind
          --tool=memcheck
          --leak-check=full
          --show-leak-kinds=all
          ./test_driver_experimental
          --reporter console::out=-::colour-mode=ansi
          --success
        working-directory: ${{ env.BINARY_DIR }}

      - name: Run benchmarks
        run: >-
          ./benchmark_driver
          --durations yes
          --reporter console::out=-::colour-mode=ansi
        working-directory: ${{ env.BINARY_DIR }}

      - name: Run benchmarks of experimental library
        run: >-
          ./benchmark_driver_experimental
          --durations yes
          --reporter console::out=-::colour-mode=ansi
        working-directory: ${{ env.BINARY_DIR }}

  apple_clang_debug_aarch64_macos:
    name: Build (Apple Clang Debug AArch64 macOS)
    env:
      CONFIGURE_PRESET_NAME: xcode
      BUILD_DIR: ${{ github.workspace }}/out/build/xcode
      BUILD_CONFIGURATION: Debug
      VCPKG_BINARY_SOURCES: clear;nuget,GitHubPackages,readwrite
      XCODE_RELEASE: "16.2"

    runs-on: macos-15

    steps:
      - name: Set default Xcode release
        run: >-
          sudo xcode-select
          -switch '/Applications/Xcode_${{ env.XCODE_RELEASE }}.app'

      - name: Check out repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install tools
        run: >-
          brew install mono

      - name: Check out vcpkg
        uses: actions/checkout@v4
        with:
          repository: microsoft/vcpkg
          path: ${{ github.workspace }}/vcpkg
          persist-credentials: false

      - name: Bootstrap vcpkg
        run: ${{ github.workspace }}/vcpkg/bootstrap-vcpkg.sh -disableMetrics

      - name: Add NuGet sources
        env:
          FEED_URL: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
        run: >-
          mono `${{ github.workspace }}/vcpkg/vcpkg fetch nuget | tail -n 1`
          sources add
          -source "${{ env.FEED_URL }}"
          -storepasswordincleartext
          -name "GitHubPackages"
          -username "${{ github.repository_owner }}"
          -password "${{ secrets.GITHUB_TOKEN }}"

          mono `${{ github.workspace }}/vcpkg/vcpkg fetch nuget | tail -n 1`
          setapikey "${{ secrets.GITHUB_TOKEN }}"
          -source "${{ env.FEED_URL }}"

      - name: Configure CMake
        run: >-
          cmake
          --preset '${{ env.CONFIGURE_PRESET_NAME }}'

      - name: Build with sanitizers
        run: >-
          cmake
          --build '${{ env.BUILD_DIR }}'
          --config '${{ env.BUILD_CONFIGURATION }}'
          --parallel
          --
          -enableAddressSanitizer YES
          -enableUndefinedBehaviorSanitizer YES

      - name: Run test driver
        run: >-
          ./test_driver
          --reporter console::out=-::colour-mode=ansi
          --success
        working-directory: ${{ env.BUILD_DIR }}/${{ env.BUILD_CONFIGURATION }}

      - name: Run static test driver
        run: >-
          ./static_test_driver
          --reporter console::out=-::colour-mode=ansi
          --success
        working-directory: ${{ env.BUILD_DIR }}/${{ env.BUILD_CONFIGURATION }}

      - name: Run test driver of experimental library
        env:
          MIMALLOC_SHOW_ERRORS: 1
          MIMALLOC_SHOW_STATS: 1
          MIMALLOC_VERBOSE: 1
        run: >-
          ./test_driver_experimental
          --reporter console::out=-::colour-mode=ansi
          --success
        working-directory: ${{ env.BUILD_DIR }}/${{ env.BUILD_CONFIGURATION }}

      - name: Run benchmarks
        run: >-
          ./benchmark_driver
          --durations yes
          --reporter console::out=-::colour-mode=ansi
        working-directory: ${{ env.BUILD_DIR }}/${{ env.BUILD_CONFIGURATION }}

      - name: Run benchmarks of experimental library
        run: >-
          ./benchmark_driver_experimental
          --durations yes
          --reporter console::out=-::colour-mode=ansi
        working-directory: ${{ env.BUILD_DIR }}/${{ env.BUILD_CONFIGURATION }}

  apple_clang_release_aarch64_macos:
    name: Build (Apple Clang Release AArch64 macOS)
    env:
      CONFIGURE_PRESET_NAME: xcode
      BUILD_DIR: ${{ github.workspace }}/out/build/xcode
      BUILD_CONFIGURATION: Release
      VCPKG_BINARY_SOURCES: clear;nuget,GitHubPackages,readwrite
      XCODE_RELEASE: "16.2"

    runs-on: macos-15

    steps:
      - name: Set default Xcode release
        run: >-
          sudo xcode-select
          -switch '/Applications/Xcode_${{ env.XCODE_RELEASE }}.app'

      - name: Check out repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install tools
        run: >-
          brew install mono

      - name: Check out vcpkg
        uses: actions/checkout@v4
        with:
          repository: microsoft/vcpkg
          path: ${{ github.workspace }}/vcpkg
          persist-credentials: false

      - name: Bootstrap vcpkg
        run: ${{ github.workspace }}/vcpkg/bootstrap-vcpkg.sh -disableMetrics

      - name: Add NuGet sources
        env:
          FEED_URL: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
        run: >-
          mono `${{ github.workspace }}/vcpkg/vcpkg fetch nuget | tail -n 1`
          sources add
          -source "${{ env.FEED_URL }}"
          -storepasswordincleartext
          -name "GitHubPackages"
          -username "${{ github.repository_owner }}"
          -password "${{ secrets.GITHUB_TOKEN }}"

          mono `${{ github.workspace }}/vcpkg/vcpkg fetch nuget | tail -n 1`
          setapikey "${{ secrets.GITHUB_TOKEN }}"
          -source "${{ env.FEED_URL }}"

      - name: Configure CMake
        run: >-
          cmake
          --preset '${{ env.CONFIGURE_PRESET_NAME }}'

      - name: Build
        run: >-
          cmake
          --build '${{ env.BUILD_DIR }}'
          --config '${{ env.BUILD_CONFIGURATION }}'
          --parallel

      - name: Run test driver
        run: >-
          ./test_driver
          --reporter console::out=-::colour-mode=ansi
          --success
        working-directory: ${{ env.BUILD_DIR }}/${{ env.BUILD_CONFIGURATION }}

      - name: Run static test driver
        run: >-
          ./static_test_driver
          --reporter console::out=-::colour-mode=ansi
          --success
        working-directory: ${{ env.BUILD_DIR }}/${{ env.BUILD_CONFIGURATION }}

      - name: Run test driver of experimental library
        env:
          MIMALLOC_SHOW_ERRORS: 1
          MIMALLOC_SHOW_STATS: 1
          MIMALLOC_VERBOSE: 1
        run: >-
          ./test_driver_experimental
          --reporter console::out=-::colour-mode=ansi
          --success
        working-directory: ${{ env.BUILD_DIR }}/${{ env.BUILD_CONFIGURATION }}

      - name: Run benchmarks
        run: >-
          ./benchmark_driver
          --durations yes
          --reporter console::out=-::colour-mode=ansi
        working-directory: ${{ env.BUILD_DIR }}/${{ env.BUILD_CONFIGURATION }}

      - name: Run benchmarks of experimental library
        run: >-
          ./benchmark_driver_experimental
          --durations yes
          --reporter console::out=-::colour-mode=ansi
        working-directory: ${{ env.BUILD_DIR }}/${{ env.BUILD_CONFIGURATION }}

  clang_debug_x86_64_linux:
    name: Build (Clang Debug x86-64 Linux)
    env:
      CONFIGURE_PRESET_NAME: strict-clang
      BUILD_PRESET_NAME: strict-clang-debug
      BINARY_DIR: ${{ github.workspace }}/out/build/strict-clang/Debug
      VCPKG_BINARY_SOURCES: clear;nuget,GitHubPackages,readwrite
    runs-on: ubuntu-24.04

    steps:
      - name: Retrieve the LLVM archive signature
        run: |-
          echo "Types: deb
          URIs: http://apt.llvm.org/noble/
          Suites: llvm-toolchain-noble-20
          Components: main
          Signed-By:
          $(wget --output-document \
          - https://apt.llvm.org/llvm-snapshot.gpg.key \
          | sed -e 's/^$/./' -e 's/^/ /')" \
          | sudo tee /etc/apt/sources.list.d/llvm-toolchain-noble.sources \
          > /dev/null

      - name: Install tools
        run: >-
          sudo apt-get update

          sudo apt-get install
          clang-20
          clang-tools-20
          libc++-20-dev
          libc++1-20
          libc++abi-20-dev
          libc++abi1-20
          mono-complete
          ninja-build
          valgrind

          sudo update-alternatives
          --install /usr/bin/cc cc /usr/bin/clang-20 100

          sudo update-alternatives
          --install /usr/bin/c++ c++ /usr/bin/clang++-20 100

      - name: Check out repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Check out vcpkg
        uses: actions/checkout@v4
        with:
          repository: microsoft/vcpkg
          path: ${{ github.workspace }}/vcpkg
          persist-credentials: false

      - name: Bootstrap vcpkg
        run: ${{ github.workspace }}/vcpkg/bootstrap-vcpkg.sh -disableMetrics

      - name: Add NuGet sources
        env:
          FEED_URL: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
        run: >-
          mono `${{ github.workspace }}/vcpkg/vcpkg fetch nuget | tail -n 1`
          sources add
          -source "${{ env.FEED_URL }}"
          -storepasswordincleartext
          -name "GitHubPackages"
          -username "${{ github.repository_owner }}"
          -password "${{ secrets.GITHUB_TOKEN }}"

          mono `${{ github.workspace }}/vcpkg/vcpkg fetch nuget | tail -n 1`
          setapikey "${{ secrets.GITHUB_TOKEN }}"
          -source "${{ env.FEED_URL }}"

      # WORKAROUND: Add -fno-builtin-std-forward_like for GCC 14 until GCC 14.3
      - name: Configure CMake
        run: >-
          cmake -E env CXXFLAGS="-fno-builtin-std-forward_like"
          cmake
          --preset '${{ env.CONFIGURE_PRESET_NAME }}'

      - name: Build
        run: >-
          cmake
          --build
          --parallel
          --preset '${{ env.BUILD_PRESET_NAME }}'

      - name: Run and instrument test driver
        run: >-
          /usr/bin/valgrind
          --tool=memcheck
          --leak-check=full
          --show-leak-kinds=all
          ./test_driver
          --reporter console::out=-::colour-mode=ansi
          --success
        working-directory: ${{ env.BINARY_DIR }}

      - name: Run static test driver
        run: >-
          ./static_test_driver
          --reporter console::out=-::colour-mode=ansi
          --success
        working-directory: ${{ env.BINARY_DIR }}

      - name: Run and instrument test driver of experimental library
        env:
          MIMALLOC_SHOW_ERRORS: 1
          MIMALLOC_SHOW_STATS: 1
          MIMALLOC_VERBOSE: 1
        run: >-
          /usr/bin/valgrind
          --tool=memcheck
          --leak-check=full
          --show-leak-kinds=all
          ./test_driver_experimental
          --reporter console::out=-::colour-mode=ansi
          --success
        working-directory: ${{ env.BINARY_DIR }}

      - name: Run benchmarks
        run: >-
          ./benchmark_driver
          --durations yes
          --reporter console::out=-::colour-mode=ansi
        working-directory: ${{ env.BINARY_DIR }}

      - name: Run benchmarks of experimental library
        run: >-
          ./benchmark_driver_experimental
          --durations yes
          --reporter console::out=-::colour-mode=ansi
        working-directory: ${{ env.BINARY_DIR }}

  clang_release_x86_64_linux:
    name: Build (Clang Release x86-64 Linux)
    env:
      CONFIGURE_PRESET_NAME: strict-clang
      BUILD_PRESET_NAME: strict-clang-release
      BINARY_DIR: ${{ github.workspace }}/out/build/strict-clang/Release
      VCPKG_BINARY_SOURCES: clear;nuget,GitHubPackages,readwrite
    runs-on: ubuntu-24.04

    steps:
      - name: Retrieve the LLVM archive signature
        run: |-
          echo "Types: deb
          URIs: http://apt.llvm.org/noble/
          Suites: llvm-toolchain-noble-20
          Components: main
          Signed-By:
          $(wget --output-document \
          - https://apt.llvm.org/llvm-snapshot.gpg.key \
          | sed -e 's/^$/./' -e 's/^/ /')" \
          | sudo tee /etc/apt/sources.list.d/llvm-toolchain-noble.sources \
          > /dev/null

      - name: Install tools
        run: >-
          sudo apt-get update

          sudo apt-get install
          clang-20
          clang-tools-20
          libc++-20-dev
          libc++1-20
          libc++abi-20-dev
          libc++abi1-20
          mono-complete
          ninja-build
          valgrind

          sudo update-alternatives
          --install /usr/bin/cc cc /usr/bin/clang-20 100

          sudo update-alternatives
          --install /usr/bin/c++ c++ /usr/bin/clang++-20 100

      - name: Check out repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Check out vcpkg
        uses: actions/checkout@v4
        with:
          repository: microsoft/vcpkg
          path: ${{ github.workspace }}/vcpkg
          persist-credentials: false

      - name: Bootstrap vcpkg
        run: ${{ github.workspace }}/vcpkg/bootstrap-vcpkg.sh -disableMetrics

      - name: Add NuGet sources
        env:
          FEED_URL: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
        run: >-
          mono `${{ github.workspace }}/vcpkg/vcpkg fetch nuget | tail -n 1`
          sources add
          -source "${{ env.FEED_URL }}"
          -storepasswordincleartext
          -name "GitHubPackages"
          -username "${{ github.repository_owner }}"
          -password "${{ secrets.GITHUB_TOKEN }}"

          mono `${{ github.workspace }}/vcpkg/vcpkg fetch nuget | tail -n 1`
          setapikey "${{ secrets.GITHUB_TOKEN }}"
          -source "${{ env.FEED_URL }}"

      # WORKAROUND: Add -fno-builtin-std-forward_like for GCC 14 until GCC 14.3
      - name: Configure CMake
        run: >-
          cmake -E env CXXFLAGS="-fno-builtin-std-forward_like"
          cmake
          --preset '${{ env.CONFIGURE_PRESET_NAME }}'

      - name: Build
        run: >-
          cmake
          --build
          --parallel
          --preset '${{ env.BUILD_PRESET_NAME }}'

      - name: Run and instrument test driver
        run: >-
          /usr/bin/valgrind
          --tool=memcheck
          --leak-check=full
          --show-leak-kinds=all
          ./test_driver
          --reporter console::out=-::colour-mode=ansi
          --success
        working-directory: ${{ env.BINARY_DIR }}

      - name: Run static test driver
        run: >-
          ./static_test_driver
          --reporter console::out=-::colour-mode=ansi
          --success
        working-directory: ${{ env.BINARY_DIR }}

      - name: Run and instrument test driver of experimental library
        env:
          MIMALLOC_SHOW_ERRORS: 1
          MIMALLOC_SHOW_STATS: 1
          MIMALLOC_VERBOSE: 1
        run: >-
          /usr/bin/valgrind
          --tool=memcheck
          --leak-check=full
          --show-leak-kinds=all
          ./test_driver_experimental
          --reporter console::out=-::colour-mode=ansi
          --success
        working-directory: ${{ env.BINARY_DIR }}

      - name: Run benchmarks
        run: >-
          ./benchmark_driver
          --durations yes
          --reporter console::out=-::colour-mode=ansi
        working-directory: ${{ env.BINARY_DIR }}

      - name: Run benchmarks of experimental library
        run: >-
          ./benchmark_driver_experimental
          --durations yes
          --reporter console::out=-::colour-mode=ansi
        working-directory: ${{ env.BINARY_DIR }}

  clang_sanitizers:
    name: Build (Clang AddressSanitizer and UndefinedBehaviorSanitizer)
    env:
      CONFIGURE_PRESET_NAME: clang-sanitizers
      BINARY_DIR: ${{ github.workspace }}/out/build/clang-sanitizers
      VCPKG_BINARY_SOURCES: clear;nuget,GitHubPackages,readwrite
    runs-on: ubuntu-24.04

    steps:
      - name: Retrieve the LLVM archive signature
        run: |-
          echo "Types: deb
          URIs: http://apt.llvm.org/noble/
          Suites: llvm-toolchain-noble-20
          Components: main
          Signed-By:
          $(wget --output-document \
          - https://apt.llvm.org/llvm-snapshot.gpg.key \
          | sed -e 's/^$/./' -e 's/^/ /')" \
          | sudo tee /etc/apt/sources.list.d/llvm-toolchain-noble.sources \
          > /dev/null

      - name: Install tools
        run: >-
          sudo apt-get update

          sudo apt-get install
          clang-20
          clang-tools-20
          libc++-20-dev
          libc++1-20
          libc++abi-20-dev
          libc++abi1-20
          mono-complete
          ninja-build

          sudo update-alternatives
          --install /usr/bin/cc cc /usr/bin/clang-20 100

          sudo update-alternatives
          --install /usr/bin/c++ c++ /usr/bin/clang++-20 100

      - name: Check out repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Check out vcpkg
        uses: actions/checkout@v4
        with:
          repository: microsoft/vcpkg
          path: ${{ github.workspace }}/vcpkg
          persist-credentials: false

      - name: Bootstrap vcpkg
        run: ${{ github.workspace }}/vcpkg/bootstrap-vcpkg.sh -disableMetrics

      - name: Add NuGet sources
        env:
          FEED_URL: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
        run: >-
          mono `${{ github.workspace }}/vcpkg/vcpkg fetch nuget | tail -n 1`
          sources add
          -source "${{ env.FEED_URL }}"
          -storepasswordincleartext
          -name "GitHubPackages"
          -username "${{ github.repository_owner }}"
          -password "${{ secrets.GITHUB_TOKEN }}"

          mono `${{ github.workspace }}/vcpkg/vcpkg fetch nuget | tail -n 1`
          setapikey "${{ secrets.GITHUB_TOKEN }}"
          -source "${{ env.FEED_URL }}"

      # WORKAROUND: Add -fno-builtin-std-forward_like for GCC 14 until GCC 14.3
      - name: Configure CMake
        run: >-
          cmake -E env CXXFLAGS="-fno-builtin-std-forward_like"
          cmake
          --preset '${{ env.CONFIGURE_PRESET_NAME }}'

      - name: Build
        run: >-
          cmake
          --build '${{ env.BINARY_DIR }}'
          --parallel

      - name: Run and instrument test driver
        run: >-
          ./test_driver
          --reporter console::out=-::colour-mode=ansi
          --success
        working-directory: ${{ env.BINARY_DIR }}

      - name: Run static test driver
        run: >-
          ./static_test_driver
          --reporter console::out=-::colour-mode=ansi
          --success
        working-directory: ${{ env.BINARY_DIR }}

      - name: Run and instrument test driver of experimental library
        env:
          MIMALLOC_SHOW_ERRORS: 1
          MIMALLOC_SHOW_STATS: 1
          MIMALLOC_VERBOSE: 1
        run: >-
          ./test_driver_experimental
          --reporter console::out=-::colour-mode=ansi
          --success
        working-directory: ${{ env.BINARY_DIR }}

      - name: Run benchmarks
        run: >-
          ./benchmark_driver
          --durations yes
          --reporter console::out=-::colour-mode=ansi
        working-directory: ${{ env.BINARY_DIR }}

      - name: Run benchmarks of experimental library
        run: >-
          ./benchmark_driver_experimental
          --durations yes
          --reporter console::out=-::colour-mode=ansi
        working-directory: ${{ env.BINARY_DIR }}
